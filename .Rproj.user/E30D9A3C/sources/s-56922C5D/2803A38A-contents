###--------------------###
### LAB 2 (12/03/2018) ###
###--------------------###

### TOPICS:
### Visualization of Multivariate Data
### Visualization of Categorical Data
### 3d plots, functions, "for" cycles
### Probability density functions, Cumulative distribution functions, Quantiles
### Random number generation
### QQplots

setwd("~/Google Drive/PoliMI/Applied Statistics/Directory/Lab 2 - 12.03.2018")

#_______________________________________________________________________________
##### Visualization of Multivariate Data
##### Example 1: dataset record (all the variables)

record <- read.table('record_mod.txt', header=T)
record

# Scatterplot
quartz()
pairs(record)  # or plot(record)

# Boxplot
boxplot(record, col='gold')
# careful! the line is the median, and the other two are quartiles

boxplot(log(record), col='gold')

# Starplot
quartz()
stars(record, col.stars=rep('gold',55))
# each variable is normalized to the biggest one
# the larger the star the greatest is the difference

# Radarplot
stars(record, draw.segments=T)
# every colour is a different variable

# Chernoff faces
quartz()
source('faces.R')
faces(record)
# each variable is the caratheristics of the faces
# similar faces are similar variables

##### Example 2: cerebral aneurysm
aneurysm <- read.table('aneurysm.txt', header=T, sep=',')
head(aneurysm)

# vessels have different curvatures and radiuses

aneurysm.geometry <- aneurysm[,1:4]
aneurysm.position <- factor(aneurysm[,5])

dim(aneurysm)
head(aneurysm.geometry)

color.position <- ifelse(aneurysm.position == '1', 'red', 'blue')
# if position = 1, red. Otherwise, blue.

attach(aneurysm.geometry)

quartz()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(R1,R2, asp=1, col=color.position,pch=16)
hist(R1, prob=T, xlim=c(-10,15))
hist(R2, prob=T, xlim=c(-10,15))

quartz()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(C1,C2, asp=1, col=color.position,pch=16)
hist(C1, prob=T, xlim=c(-5,5))
hist(C2, prob=T, xlim=c(-5,5))

graphics.off()

detach(aneurysm.geometry)

# some statistical indices
sapply(aneurysm.geometry,mean)
sapply(aneurysm.geometry,sd)
cov(aneurysm.geometry)
cor(aneurysm.geometry)

# Attention: rounded zeros!
round(sapply(aneurysm.geometry,mean),1)
round(cov(aneurysm.geometry),1)
round(cor(aneurysm.geometry),1)

# Scatterplot
quartz()
pairs(aneurysm.geometry, col=color.position, pch=16)

# Boxplot
boxplot(aneurysm.geometry, col='gold')

# Stratified boxplots
quartz()
par(mfrow = c(1,4))
boxplot(aneurysm.geometry$R1 ~ aneurysm.position, col=c('red','blue'), main='R1')
boxplot(aneurysm.geometry$R2 ~ aneurysm.position, col=c('red','blue'), main='R2')
boxplot(aneurysm.geometry$C1 ~ aneurysm.position, col=c('red','blue'), main='C1')
boxplot(aneurysm.geometry$C2 ~ aneurysm.position, col=c('red','blue'), main='C2')

# the blue has much less variability than the red

# Stratified boxplots (same scale)
# correct bloxplot: they have to be comparable
par(mfrow = c(1,4))
boxplot(aneurysm.geometry$R1 ~ aneurysm.position, col=c('red','blue'), main='R1', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$R2 ~ aneurysm.position, col=c('red','blue'), main='R2', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$C1 ~ aneurysm.position, col=c('red','blue'), main='C1', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$C2 ~ aneurysm.position, col=c('red','blue'), main='C2', ylim=range(aneurysm.geometry))

dev.off()

# Chernoff faces
source('faces.R')
quartz()
faces(aneurysm.geometry)

#_______________________________________________________________________________
##### Visualization of Categorical Data

district <- c('MI',  'MI',  'VA',  'BG',  'LO', 'LO',  'CR',  'Alt', 'CR',  'MI',  
              'Alt', 'CR',  'LO',  'VA',  'MI',  'Alt', 'LO',  'MI')
district <- factor(district,levels=c('MI','LO','BG','CR','VA','Alt'))
district

# Pie chart (no ordering of levels)
quartz()
pie(table(district),col=rainbow(length(levels(district)))) 

# 3D Pie chart (not recommended!!)
# looks nicer, but it's not reccomended because there is a distortion
library(plotrix)
quartz(width = 14)
par(mfrow=c(1,2))
pie3D(table(district)[1:length(levels(district))],labels=levels(district),explode=0.1,
      main="Pie Chart of Districts ",col=rainbow(length(levels(district))))
set.seed(180317)
shuffle = sample(1:length(levels(district)), size=length(levels(district)), replace = F)
pie3D(table(district)[shuffle],labels=levels(district)[shuffle],explode=0.1,
      main="Pie Chart of Districts ",col=rainbow(length(levels(district)))[shuffle])

# Barplot (levels are ordered)
quartz()
barplot(table(district)/length(district))  

# or
plot(district)   # barplot of absolute frequences

# Remark: R is an object-oriented language; a function (e.g.,
#       the function plot()) may behave differently depending on the object
#       it takes as input
is(district)[1]
plot(district)

# record is a data frame
is(record)[1]
plot(record) # scatterplot

# Remark 2: be careful to the scale of representation
quartz(width=14, height=5)
par(mfrow=c(1,3))
barplot(table(district)/length(district),ylim=c(0,1)); box()                       
barplot(table(district)/length(district),ylim=c(0,10)); box() 
# terrible
barplot(table(district)/length(district),ylim=c(0.0,0.47)); box() 

# never cut the plots with a line!

graphics.off()

#_______________________________________________________________________________
### 3d plots (for instance, let's plot a bivariate Gaussian density)

x <- seq(-4,4,0.15)
y <- seq(-4,4,0.15)

# To build a function in R
gaussian <- function(x, y) {
  exp(-(x^2+y^2+x*y))
  }

w <- matrix(NA, length(x), length(y))

# for
for(i in 1:length(x))
{
  for(j in 1:length(y))
  {w[i,j] <- gaussian(x[i], y[j])}
}

# or
w <- outer(x, y, gaussian)
# help(outer)

quartz()
image(x, y, w)
contour(x, y, w, add=T)

persp(x, y, w, col='red')
persp(x, y, w, col='red', theta=30, phi=30, shade=.05, zlab='density')

# To dowload a package: 
# from RStudio: Tools -> Instal Packages -> type PACKAGENAME 
#               and click install
# from R: Packages -> Instal Packages -> Choose a CRAN mirror
#         (e.g., Italy (Milano)) -> Choose the package and click OK
library(rgl) # import the package
persp3d(x, y, w, col='red', alpha=1)
lines3d(x,x, gaussian(x,x), col='blue', lty=1)
lines3d(x,x, 0, col='blue', lty=2)

dev.off()

############################################################
####       More on graphical representation in R        ####
####           http://raw.densitydesign.org/            ####
####                     Ggobi                          ####
#### source("http://www.ggobi.org/downloads/install.r") ####
############################################################

# interactive plots

#_______________________________________________________________________________
### Probability density functions, Cumulative distribution functions, Quantiles,

### Example: Gaussian distribution
# Probability density function (pdf)
dnorm(0)                  # density function at 0 for a distribution N(0,1)
dnorm(0,mean = 1, sd = 2) # density function at 0 for a distribution N(1,4)

# Cumulative distribution function (cdf)
pnorm(0)     # P(Z<0), with Z ~ N(0,1)
# should be 1/2
pnorm(0,1,2) # P(X<0), with X ~ N(1,4)

# Quantiles (inverse of cdf)
qnorm(0.95)      #  =z s.t.  P(Z<z)=0.95, with Z ~ N(0,1)
qnorm(0.95,1,2)  #  =z s.t.  P(Z<z)=0.95, with Z ~ N(1,4)

#########################################################
##### Commands to generate random numbers, obtain pdfs 
##### cdf and its inverse for the most popular models:
#
# Commands rnorm(),  dnorm(),  pnorm(),  qnorm(), 
#          rexp(),   dexp(),   pexp(),   qexp(),           
#          runif(),  dunif(),  punif(),  qunif(),      
#          rbinom(), dbinom(), pbinom(), qbinom(),      
#          rpois(),  dpois(),  ppois(),  qpois(),      
#          rgamma(), dgamma(), pgamma(), qgamma(),      
#########################################################

### Other examples of distributions
quartz(width=21, height=21)
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, byrow=T))

s <- seq(-2, 2, by = 0.01)

plot(s, dunif(s, 0, 1), main='Uniform Unif(0,1)', type = 'l', ylim = c(0,1))
plot(s, dexp(s, 1),    main='Exponential Exp(1)', type = 'l', ylim = c(0,1))
plot(s, dnorm(s, 0, 1), main='Gaussian N(0,1)', type = 'l', ylim = c(0,1))

plot(s, punif(s, 0, 1), main='Uniform Unif(0,1)', type = 'l', ylim = c(0,1))
plot(s, pexp(s, 1),    main='Exponential Exp(1)', type = 'l', ylim = c(0,1))
plot(s, pnorm(s, 0, 1), main='Gaussian N(0,1)', type = 'l', ylim = c(0,1))

w <- seq(0.01/2, 1 - 0.01/2, by = 0.01)

plot(w, qunif(w, 0, 1), main='Uniform Unif(0,1)', type = 'l')
plot(w, qexp(w, 1),    main='Exponential Exp(1)', type = 'l')
plot(w, qnorm(w, 0, 1), main='Gaussian N(0,1)', type = 'l')

#_______________________________________________________________________________
### Generation of random numbers

set.seed(10032016)
x <- runif( n=1000, min=0, max=1)
y <- rexp( n=1000, rate=1)
z <- rnorm( n=1000, mean=0, sd=1)

quartz(width=21, height=14)
par(mfrow=c(2,3))
plot(x, main='Uniform Unif(0,1)')
plot(y, main='Exponential Exp(1)')
plot(z, main='Gaussian N(0,1)')

hist(x, main='', col='grey', xlab='x', prob=T)
lines(seq(-0.2, 1.2, length=100), dunif(seq(-0.2, 1.2, length=100)), col='blue', lty=2, lwd=2)
box()
hist(y, main='', col='grey', xlab='x', prob=T, ylim=c(0,1))
lines(seq(-1, 9, length=100), dexp(seq(-1, 9, length=100)), col='blue', lty=2, lwd=2)
box()
hist(z, main='', col='grey', xlab='x', prob=T, ylim=c(0,.45))
lines(seq(-4, 4, length=100), dnorm(seq(-4, 4, length=100)), col='blue', lty=2, lwd=2)
box()

graphics.off()

#_______________________________________________________________________________
### QQplot
# The QQplot (command qqplot()) can be used to verify if a sample comes
# from a given distribution

# Remark: the QQplot can be plotted for any distribution - not necessarily
# Gaussian 

quartz(width=21, height=21)
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, byrow=T))

plot(x, main='Uniform Unif(0,1)')
plot(y, main='Exponential Exp(1)')
plot(z, main='Gaussian N(0,1)')

hist(x, main='', col='grey', xlab='x', prob=T)
lines(seq(-0.2, 1.2, length=100), dunif(seq(-0.2, 1.2, length=100)), col='blue', lty=2, lwd=2)
box()
hist(y, main='', col='grey', xlab='x', prob=T, ylim=c(0,1))
lines(seq(-1, 9, length=100), dexp(seq(-1, 9, length=100)), col='blue', lty=2, lwd=2)
box()
hist(z, main='', col='grey', xlab='x', prob=T, ylim=c(0,.45))
lines(seq(-4, 4, length=100), dnorm(seq(-4, 4, length=100)), col='blue', lty=2, lwd=2)
box()

qqplot(qunif((1:1000/1000-0.5/1000)), x, col='red', xlab='Theoretical quantile', ylab='Sample Quantile', asp=1)
abline(0, 1, col='blue')
qqplot(qexp((1:1000/1000-0.5/1000)), y, col='red', xlab='Theoretical quantile', ylab='Sample Quantile', asp=1)
abline(0, 1, col='blue')
qqplot(qnorm((1:1000/1000-0.5/1000)), z, col='red', xlab='Theoretical quantile', ylab='Sample Quantile', asp=1)
abline(0, 1, col='blue')

# Nevertheless, the QQplot is mostly used to qualitatively verify if a sample
# comes from a Gaussian distribution

quartz()
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, byrow=T))

x <- runif( n=1000, min=0, max=1)
y <- rexp( n=1000, rate=1)
z <- rnorm( n=1000, mean=0, sd=1)

qqplot(qnorm((1:1000/1000-1/2000)), x, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, main='Unif(0,1)')
qqplot(qnorm((1:1000/1000-1/2000)), y, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, main='Exp(1)')
qqplot(qnorm((1:1000/1000-1/2000)), z, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, main='N(0,1)')

x <- runif( n=100, min=0, max=1)
y <- rexp( n=100, rate=1)
z <- rnorm( n=100, mean=0, sd=1)

qqplot(qnorm((1:100/100-1/200)), x, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1)
qqplot(qnorm((1:100/100-1/200)), y, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1)
qqplot(qnorm((1:100/100-1/200)), z, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1)

x <- runif( n=10, min=0, max=1)
y <- rexp( n=10, rate=1)
z <- rnorm( n=10, mean=0, sd=1)

qqplot(qnorm((1:10/10-1/20)), x, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1)
qqplot(qnorm((1:10/10-1/20)), y, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1)
qqplot(qnorm((1:10/10-1/20)), z, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1)

# These plots can be obtained by using the command qqnorm() that automatically
# computes the theoretical quantiles of the Gaussian distribution.
# Further, R creates automatically the line with the command qqline(),
# that plots the straight line through the first and third quartile

# What happens when the sample comes from a non-standard Gaussian? 

quartz(width=21, height=21)
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, byrow=T))

x <- rnorm( n=1000, mean=0, sd=1)
y <- rnorm( n=1000, mean=2, sd=1)
z <- rnorm( n=1000, mean=0, sd=2)

qqplot(qnorm((1:1000/1000-1/2000)), x, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2, main='N(0,1)')
abline(0,1)
qqline(x, col='red')
qqplot(qnorm((1:1000/1000-1/2000)), y, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2, main='N(2,1)')
abline(0,1)
qqline(y, col='red')
qqplot(qnorm((1:1000/1000-1/2000)), z, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2, main='N(0,2)')
abline(0,1)
qqline(z, col='red')

x <- rnorm( n=100, mean=0, sd=1)
y <- rnorm( n=100, mean=2, sd=1)
z <- rnorm( n=100, mean=0, sd=2)

qqplot(qnorm((1:100/100-1/200)), x, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2)
abline(0,1)
qqline(x, col='red')
qqplot(qnorm((1:100/100-1/200)), y, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2)
abline(0,1)
qqline(y, col='red')
qqplot(qnorm((1:100/100-1/200)), z, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2)
abline(0,1)
qqline(z, col='red')

x <- rnorm( n=10, mean=0, sd=1)
y <- rnorm( n=10, mean=2, sd=1)
z <- rnorm( n=10, mean=0, sd=2)

qqplot(qnorm((1:10/10-1/20)), x, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2)
abline(0,1)
qqline(x, col='red')
qqplot(qnorm((1:10/10-1/20)), y, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2)
abline(0,1)
qqline(y, col='red')
qqplot(qnorm((1:10/10-1/20)), z, col='red', xlab='Theoretical quantile N(0,1)', ylab='Sample quantile', asp=1, ylim=c(-5,5)*2)
abline(0,1)
qqline(z, col='red')

# If the data are Gaussian, the slope of the qqline is an estimate of 
# the standard deviation, the intercept is an estimate of the mean
# [this comes from the observation that: if x is the quantile of order
#  alpha of N(mu,sigma^2), than z=(x-mu)/sigma is the quantile of order
#  alpha of Z~N(0,1), i.e., x=mu+sigma*z].

### Test of Gaussianity: Shapiro-Wilks test
# H0: X ~ N     vs    H1=H0^c
shapiro.test(x)
shapiro.test(y)
shapiro.test(z)

# we want to prove that there is no evidence to go against the null hypotesis that the distribution is Gaussian
