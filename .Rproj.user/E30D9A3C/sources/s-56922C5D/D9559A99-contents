###--------------------###
### LAB 1 (05/03/2018) ###
###--------------------###

### TOPICS:
### Basic commands (scalars, vectors, matrices, and operations)
### Import/Export of dataframes
### Examples of univariate statistical analyses with plots

#_______________________________________________________________________________
##### Getting started

# To download R:   http://www.r-project.org/

# For further info on R:
# - material on the R website
# - "help" button in the R interface

# for a "user friendly" interface --> RStudio
# (you can download it from rstudio.org)

# Comments: to comment a line insert "#" 

# To execute a command directly from the script (i.e., without copy & paste
# in the Console)
# With R: ctrl+r
# With RStudio: ctrl+enter or ctrl+r

# the command:
setwd("~/Google Drive/PoliMI/Applied Statistics/Directory/Lab 1 - 05.03.2018")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path));

# selects the working directory, i.e., the directory in which R will 
# look for or save the files (data, plots, ..)

# the command:

getwd()

# returns the current working directory

#_______________________________________________________________________________
##### VECTORS/MATRICES & LINEAR ALGEBRA IN R

# scalars
a <- 1
a

# In the classical R syntax, values are assigned by using "<-". 
# In recent versions of R the assignment can be equivalently done 
# through "="
a=1
a

b<-3

4->c

a<-b


# vectors

v <- c(2,3,5,4)
v

u<- seq(2,5,len=4)
u

u<- seq(2,5,by=1)
u

z <- 2:5
z

# vector are not matrices, they're just vectors

# matrices
W <- rbind(c(11,13,15),c(12,14,16))
W

W <- cbind(c(11,12),c(13,14),c(15,16))
W

W <- matrix(data = c(11,12,13,14,15,16), nrow = 2, ncol = 3, byrow = F)
W

################################################################################
#_______________________________________________________________________________
##### help

# if you remember the name of the command use
# help(COMMANDNAME)
# e.g.
help(matrix)

# if you don't remember the command name use
# help.search("KEYWORD")
help.search("matrix")

# or 
help.start()
# or from the console: "Help" --> "R help"
################################################################################

#_______________________________________________________________________________
# Extraction of elements from a vector or a matrix

v
v[2]
v[c(2,3)]

W
W[2,3]
W[2,c(2,3)]
W[2,]
W[,c(2,3)]

# Remark: in R vectors "are not" matrices n*1 o 1*n:
# vectors have only one index, whereas matrices have
# two indices (for rows and columns)

v
rbind(v)
cbind(v)

# Algebraic operations in R
# Remark: by default, operations are done component-wise

a <- 1
b <- 2

c <- c(2,3,4)
d <- c(10,10,10)

Z <- matrix(c(1,10,3,10,5,10), nrow = 2, ncol = 3, byrow = F)

# Sum and multiplication (component-wise).
# (this default is different from that of matlab!)

a+b # scalar + scalar

c+d # vector + vector

a*b # scalar * scalar

c*d # vector * vector (component-wise)

c+a # vector + scalar

c^2 # attention: operations are always component-wise!

exp(c) 

sum(c) # sums the components of c
 
prod(c) # returns the product of the components of c

# Operations on matrices

V <- t(W) # transpose of a matrix

Z+W # matrix + matrix (component-wise)

Z*W # matrix * matrix (component-wise) 

V*W # matrix * matrix (component-wise) (error!)

V %*% W # Matrix multiplication
W %*% V 

W+a # matrix + scalar
# makes sense in R!

W+c # matrix + vector

W+2:5
# Remark: R uses the "recycling", i.e., it tries to make the
# terms dimensions compatible by recicling data if missing
# it's recycling c in this case

# Inverse of a matrix (square and invertible)
A <- matrix(c(11,13,12,14), ncol=2, nrow=2, byrow=TRUE)
det(A)
solve(A) 

# Solution of a linear system Ax=b
b <- c(1,1)
solve(A,b)

#_______________________________________________________________________________
##### Categorical data
# The command 'factor' converts the argument (vector of numbers or strings)
# in a vector of realizations of a categorical random variable, whose possible
# values are collected in 'Levels'

district <- c('MI',  'MI',  'VA',  'BG',  'LO', 'LO',  'CR',  'Alt', 'CR',  'MI',  
              'Alt', 'CR',  'LO',  'VA',  'MI',  'Alt', 'LO',  'MI')
district <- factor(district,levels=c('MI','LO','BG','CR','VA','Alt'))
district

resass <- table(district) # table of absolute frequences
resass
resrel <- table(district)/length(district) # table of relative frequences
resrel

#_______________________________________________________________________________
##### lists: objects made of objects (objects can be of different type)

exam <- list (course = 'Applied Statistics',  
              date = '27/09/2014',
              enrolled = 7,
              corrected = 6,
              student_id = as.character(c(45020,45679,46789,43126,42345,47568,45674)),
              evaluation = c(30,29,30,NA,25,26,27) 
)
exam
# avoid to name variables NA, true, false, T, F

exam$evaluation
exam[[6]]

#_______________________________________________________________________________
##### data.frame: objects made of vectors of the same lengths,
##### possibly of different types.
##### (Remark: they look like matrices by they aren't!)

exam <- data.frame(
  student_id = factor(as.character(c(45020,45679,46789,43126,42345,47568,45674))),
  evaluation_W = c(30,29,30,NA,25,26,17), 
  evaluation_O = c(28,30,30,NA,28,27,NA), 
  evaluation_P = c(30,30,30,30,28,28,28),
  outcome  = factor(c('Passed','Passed','Passed','To be repeated','Passed','Passed','To be repeated')))
exam

exam$evaluation_W    # a data.frame is a particular kind of list!
evaluation_W

attach(exam)
evaluation_W
detach(exam)
evaluation_W

#_______________________________________________________________________________
##### Data Import/Export

record <- read.table('record.txt', header=T)
record

dim(record)
dimnames(record)

# Transform times in seconds
record[,4:7] <- record[,4:7]*60
record

# to save a data frame (or a matrix)
write.table(record, file = 'record_mod.txt')

# Remark. The file containing 'record_mod.txt' will be saved in the working directory 

# to save several objects in the workspace
W <- matrix(data = c(11,12,13,14,15,16), nrow = 2, ncol = 3, byrow = F)
V <- t(W)
a <- 1

save(W,V,a, file = 'variousobjects.RData')

# to save the entire workspace: save.image('FILENAME.RData')
save.image("myworkspace.RData")

# this command remove all the variable of the workspace
rm(list=ls())
ls()

# to load a workspace (i.e., .RData)
load("variousobjects.RData")

ls()

#_______________________________________________________________________________
##### Example: analysis of quantitative data (with plots) 

record <- read.table('record_mod.txt', header=T)
record

# some synthetic indices
colMeans(record)
sapply(record, mean)
sapply(record, sd)
sapply(record, var)
cov(record)
cor(record)

##### Descriptive/inferential analysis on the variable m100 ('very basic'!)
attach(record)

### t-test for the mean value of the quantity 
### H0: mean==11.5 vs H1: mean!=11.5

# Recall: qqplot to verify (qualitatively) the Gaussian assumption on the
# distribution generating sample
qqnorm(m100) # quantile-quantile plot
qqline(m100, col='red') # theoretical line
# Recall: Shapiro-Wilk test to verify (quantitatively) the Gaussian assumption on the
# distribution generating sample
shapiro.test(m100)

alpha <- .05
sample.mean <- mean(m100)
mean.H0 <- 11.5
sample.sd <- sd(m100)
n     <- length(m100)
tstat <- (sample.mean - mean.H0)/(sample.sd/sqrt(n))
cfr.t <- qt( 1 - alpha/2, n-1 )
abs(tstat) < cfr.t  # cannot reject H0 (accept H0)

pval  <- ifelse(tstat >= 0, (1 - pt(tstat, n-1))*2, pt(tstat, n-1)*2)
pval

IC <- c(inf     = sample.mean - sample.sd/sqrt(n) * qt( 1 - alpha/2, n-1 ), 
        center  = sample.mean, 
        sup     = sample.mean + sample.sd/sqrt(n) * qt( 1 - alpha/2, n-1 ))
IC

# automatically
t.test(m100, mu = mean.H0, alternative = 'two.sided', conf.level = 1-alpha)

##### Simple linear regression (variable m200 vs m100)

# More than one plot in a unique device (commands par or layout)
# (command par)
quartz()
par(mfrow=c(2,2))
hist(m100,prob=T,main="Histogram records 100m",xlab="sec")
hist(m200,prob=T,main="Histogram records 200m",xlab="sec")
boxplot(record[,1:2],main="Boxplot records 100m e 200m",xlab="sec")
plot(m100,m200, main='Scatter plot records 100m e 200m',xlab="Records 100m",ylab="Records 200m")

dev.off()

# command layout
quartz()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(m100,m200)
hist(m100, prob=T)
hist(m200, prob=T)

dev.off()

# Fit of the linear model (command lm)
# Model: m200=beta0*m100+eps, eps~N(0,sigma^2)
regression <- lm(m200 ~ m100)
regression

coef(regression)
vcov(regression)
residuals(regression)
fitted(regression)

quartz()
plot(m100, m200, asp=1,cex=0.75)
abline(coef(regression))
points(m100, fitted(regression), col='red', pch=19)
legend('bottomright',c('Obs.','Fit','Reg. line'),col=c('black','red','black'),lwd=c(1,1,1),lty=c(-1,-1,1),pch=c(c(1,19,-1)))
title(main='Linear regression (m200 vs m100)')

dev.off()

# Test F "by hand" (H0: beta0=0 vs H1: beta0!=0)
SSreg <- sum((fitted(regression) - mean(m200))^2)
SSres <- sum(residuals(regression)^2)
SStot <- sum((m200 - mean(m200))^2)

n <- length(m200)
Fstat <- (SSreg/1) / (SSres/(n-2))
P <- 1 - pf(Fstat, 1, n-2)
P # reject H0

# Confidence and prediction intervals (command predict)
newdata <- data.frame(m100=c(10,11,12))
pred_nd <- predict(regression, newdata)
pred_nd

IC_nd <- predict(regression, newdata, interval = 'confidence', level = .99)
IC_nd
IP_nd <- predict(regression, newdata, interval = 'prediction', level = .99)
IP_nd

quartz()
plot(m100, m200, asp=1,ylim=c(18.5,27.5),cex=0.5)
abline(coef(regression))
points(m100, fitted(regression), col='red', pch=20)
points(c(10,11,12),pred_nd,col='blue',pch=16)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),type="l",lty=2,col='dark grey',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),pch="-",lty=2,col='dark grey',lwd=2,cex=1.5)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),type="l",lty=1,col='black',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),pch="-",lty=1,col='black',lwd=2,cex=1.5)
legend('bottomright',c('Obs.','Fit','Reg. line','Pred. new','IC','IP'),col=c('black','red','black','blue','black','dark grey'),lwd=c(1,1,1,1,2,2),lty=c(-1,-1,1,-1,1,2),pch=c(c(1,19,-1,19,-1,-1)))
title(main='Linear regression (m200 vs m100)')

dev.off()

# diagnostic of residuals
quartz()
par (mfrow=c(2,2))
boxplot(residuals(regression), main='Boxplot of residuals')
qqnorm(residuals(regression))
plot(m100, residuals(regression), main='Residuals vs m100')
abline(h=0, lwd=2)
plot(fitted(regression), residuals(regression), main='Residuals vs fitted m200')
abline(h=0, lwd=2)

dev.off()

detach(record)
graphics.off()

####################################################
#### "An Introduction to R" (Venable and Smith) ####
####################################################
